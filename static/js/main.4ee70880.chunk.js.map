{"version":3,"sources":["game-board.js","game-info.js","game-status.js","element.js","algorithm.js","game-modal.js","game.js","serviceWorker.js","index.js"],"names":["valueArray","colorArray","onClickElement","GameInfo","className","GameStatus","props","xIsNext","Element","onClick","style","color","value","backgroundColor","background","winArray","Array","winner","getWinner","isWinnerExists","array","index","getArrayWinFirstElementIndex","i","length","count","j","val","getVerticalArray","array2D","row","col","boardSize","push","getHorizontalArray","getLeftDiagonalArray","startRow","startCol","deltaBackward","nElement","getRightDiagonalArray","renderBoard","board","fill","map","renderElement","key","onClickSquare","GameBoard","Modal","setAppElement","document","getElementById","GameModal","render","isOpen","state","isModalShow","onAfterOpen","onAfterOpenModal","onRequestClose","hide","overlayClassName","contentLabel","algorithm","show","setState","Component","hasWinner","Game","stepNumber","historicValueArray","historicColorArray","ref","gameModal","onClickRevert","renderStepList","isHistorySortAsc","slice","nextValueArray","arr","nextColorArray","current","concat","moveList","step","buttonLabel","id","goTo","reverse","gameStatus","React","createRef","emptyValueArray","emptyColorArray","this","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ee70880.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Element from \"./element\";\r\n\r\nimport * as algorithm from \"./algorithm\";\r\n\r\nimport \"./game-board.css\";\r\n\r\nconst boardSize = algorithm.boardSize;\r\n\r\nlet valueArray;\r\nlet colorArray;\r\nlet onClickElement;\r\n\r\nconst GameBoard = (props) => {\r\n  valueArray = props.valueArray;\r\n  colorArray = props.colorArray;\r\n  onClickElement = props.onClickElement;\r\n\r\n  return <div className=\"game-board\">{renderBoard()}</div>;\r\n};\r\n\r\nconst renderBoard = () => {\r\n  const board = [];\r\n  let array2D = new Array(boardSize).fill().map(() => new Array(boardSize).fill(\"\"));\r\n\r\n  for (let row = 0; row < boardSize; row++) {\r\n    for (let col = 0; col < boardSize; col++) {\r\n      array2D[row][col] = renderElement(row, col);\r\n    }\r\n\r\n    board.push(\r\n      <div className=\"board-row\" key={\"board-row-\" + row}>\r\n        {array2D[row]}\r\n      </div>\r\n    );\r\n  }\r\n  return board;\r\n};\r\n\r\nconst renderElement = (row, col) => {\r\n  return (\r\n    <Element\r\n      key={row * boardSize + col}\r\n      value={valueArray[row][col]}\r\n      background={colorArray[row][col]}\r\n      onClick={() => onClickSquare(row, col)}\r\n    />\r\n  );\r\n};\r\n\r\nconst onClickSquare = (row, col) => {\r\n  if (valueArray[row][col] == null) {\r\n    onClickElement(row, col);\r\n  }\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport \"./game-info.css\";\r\n\r\n// stateless component is define as constant\r\n// instead of a class which extends React.Component\r\nconst GameInfo = () => {\r\n  return (\r\n    <div className=\"game-info\">\r\n      <br />\r\n      <br />\r\n      <hr />\r\n      <p>\r\n        App: Tic-tac-toe (Vietnamese: Caro) - v0.1.0 - written in React/NodeJS - Â©2020\r\n        <br />\r\n        Author: Huynh Thanh Binh - Email: 1653006@student.hcmus.edu.vn \r\n        <br />\r\n        Techniques: react stateful vs. stateless component & react time travel\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameInfo;\r\n","import React from \"react\";\r\nimport \"./game-status.css\";\r\n\r\nconst GameStatus = (props) => {\r\n  const xIsNext = props.xIsNext;\r\n  return (\r\n    <div className=\"game-status\">\r\n      <span className={xIsNext ? \"x-large\" : \"o-large\"}>{xIsNext ? \"X\" : \"O\"}</span>\r\n      <span className=\"turn-label\">&nbsp;turn</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameStatus;\r\n","import React from \"react\";\r\nimport \"./element.css\";\r\n\r\n// stateless component is define as constant\r\n// instead of a class which extends React.Component\r\nconst Element = (props) => {\r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      onClick={props.onClick}\r\n      style={{\r\n        color: props.value === \"X\" ? \"dodgerblue\" : \"red\",\r\n        backgroundColor: props.background,\r\n      }}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Element;\r\n","export const boardSize = 20;\r\nexport const winArray = new Array(5);\r\nlet winner = null;\r\n\r\nexport const getWinner = () => {\r\n\treturn winner;\r\n}\r\n\r\nexport const isWin = (array2D, row, col) => {\r\n\tlet value = array2D[row][col];\r\n\r\n\tif (isWinnerExists(getVerticalArray(array2D, row, col), value)\r\n\t\t|| isWinnerExists(getHorizontalArray(array2D, row, col), value)\r\n\t\t|| isWinnerExists(getLeftDiagonalArray(array2D, row, col), value)\r\n\t\t|| isWinnerExists(getRightDiagonalArray(array2D, row, col), value)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\treturn false;\r\n}\r\n\r\nconst isWinnerExists = (array, value) => {\r\n\tlet index = getArrayWinFirstElementIndex(array, value);\r\n\tif (index !== -1) {\r\n\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\twinArray[i] = array[index + i];\r\n\t\t}\r\n\t\twinner = value;\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n// 0 1 2 3 <4> 5 6 7 8 \r\n// X X X X X || O O O O O\r\nconst getArrayWinFirstElementIndex = (array, value) => {\r\n\tif (array.length >= 5) {\r\n\t\tfor (let i = 0; i <= array.length - 5; i++) {\r\n\t\t\tlet count = 0;\r\n\t\t\tfor (let j = i; j < i + 5; j++) {\r\n\t\t\t\tif (array[j].val === value) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tif (count === 5) {\r\n\t\t\t\t\t\treturn i;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nconst getVerticalArray = (array2D, row, col) => { // column\r\n\tlet array = [];\r\n\tfor (let i = ((row - 4 > 0) ? (row - 4) : 0); i <= ((row + 4 < boardSize - 1) ? (row + 4) : boardSize - 1); i++) {\r\n\t\tarray.push({ val: array2D[i][col], row: i, col: col });\r\n\t}\r\n\treturn array;\r\n}\r\n\r\nconst getHorizontalArray = (array2D, row, col) => { // row\r\n\tlet array = [];\r\n\tfor (let i = ((col - 4 > 0) ? (col - 4) : 0); i <= ((col + 4 < boardSize - 1) ? (col + 4) : boardSize - 1); i++) {\r\n\t\tarray.push({ val: array2D[row][i], row: row, col: i });\r\n\t}\r\n\treturn array;\r\n}\r\n\r\nconst getLeftDiagonalArray = (array2D, row, col) => { // topLeft --> bottomRight\r\n\tlet array = [];\r\n\tlet startRow;\r\n\tlet startCol;\r\n\tlet deltaBackward;\r\n\tlet nElement;\r\n\r\n\tfor (let i = 4; i >= 0; i--) {\r\n\t\tif (row - i >= 0 && col - i >= 0) {\r\n\t\t\tdeltaBackward = i;\r\n\t\t\tstartRow = row - i;\r\n\t\t\tstartCol = col - i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 4; i >= 0; i--) {\r\n\t\tif (row + i <= boardSize - 1 && col + i <= boardSize - 1) {\r\n\t\t\tnElement = deltaBackward + 1 + i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < nElement; i++) {\r\n\t\tarray.push({ val: array2D[startRow + i][startCol + i], row: startRow + i, col: startCol + i });\r\n\t}\r\n\r\n\treturn array;\r\n}\r\n\r\nconst getRightDiagonalArray = (array2D, row, col) => { // topRight --> bottomLeft\r\n\tlet array = [];\r\n\tlet startRow;\r\n\tlet startCol;\r\n\tlet deltaBackward;\r\n\tlet nElement;\r\n\r\n\tfor (let i = 4; i >= 0; i--) {\r\n\t\tif (row - i >= 0 && col + i <= boardSize - 1) {\r\n\t\t\tdeltaBackward = i;\r\n\t\t\tstartRow = row - i;\r\n\t\t\tstartCol = col + i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 4; i >= 0; i--) {\r\n\t\tif (row + i <= boardSize - 1 && col - i >= 0) {\r\n\t\t\tnElement = deltaBackward + 1 + i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < nElement; i++) {\r\n\t\tarray.push({ val: array2D[startRow + i][startCol - i], row: startRow + i, col: startCol - i });\r\n\t}\r\n\r\n\treturn array;\r\n}","import React, { Component } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport * as algorithm from \"./algorithm\";\r\nimport \"./game-modal.css\";\r\n\r\nModal.setAppElement(document.getElementById(\"root\"));\r\n\r\nclass GameModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalShow: false,\r\n    };\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <Modal\r\n        isOpen={this.state.isModalShow}\r\n        onAfterOpen={this.onAfterOpenModal}\r\n        onRequestClose={this.hide}\r\n        className=\"modal-content\"\r\n        overlayClassName=\"modal-overlay\"\r\n        contentLabel=\"game-modal-dialog\"\r\n      >\r\n        <div>\r\n          The winner is: &nbsp;\r\n          <span\r\n            className={algorithm.getWinner() === \"X\" ? \"x-large\" : \"o-large\"}\r\n          >\r\n            {algorithm.getWinner()}\r\n          </span>\r\n        </div>\r\n        <br />\r\n\r\n        <button onClick={this.hide}>Close</button>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  onAfterOpenModal = () => {};\r\n\r\n  show = () => {\r\n    this.setState({\r\n      isModalShow: true,\r\n    });\r\n  };\r\n\r\n  hide = () => {\r\n    this.setState({\r\n      isModalShow: false,\r\n    });\r\n  };\r\n}\r\n\r\nexport default GameModal;\r\n","import React, { Component } from \"react\";\r\nimport GameInfo from \"./game-info\";\r\nimport GameStatus from \"./game-status\";\r\nimport GameBoard from \"./game-board\";\r\nimport GameModal from \"./game-modal\";\r\nimport * as algorithm from \"./algorithm\";\r\nimport \"./game.css\";\r\n\r\nlet hasWinner = false;\r\nconst boardSize = algorithm.boardSize;\r\nconst winArray = algorithm.winArray;\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.gameStatus = React.createRef();\r\n    this.gameModal = React.createRef();\r\n\r\n    this.state = {\r\n      stepNumber: 0,\r\n      isHistorySortAsc: true,\r\n      historicValueArray: [emptyValueArray],\r\n      historicColorArray: [emptyColorArray],\r\n    };\r\n  }\r\n\r\n  goTo(step) {\r\n    if (!hasWinner) {\r\n      this.setState({\r\n        stepNumber: step,\r\n      });\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const xIsNext = this.state.stepNumber % 2 === 0;\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-main\">\r\n          <GameStatus xIsNext={!hasWinner ? xIsNext : !xIsNext} />\r\n          <GameBoard\r\n            onClickElement={(row, col) => this.onClickElement(row, col)}\r\n            valueArray={this.state.historicValueArray[this.state.stepNumber]}\r\n            colorArray={this.state.historicColorArray[hasWinner ? 1 : 0]}\r\n          />\r\n          <GameInfo />\r\n          <GameModal ref={this.gameModal} />\r\n        </div>\r\n        <div className=\"game-vr\"></div>\r\n        <div className=\"game-sub\">\r\n          <button className=\"btnReverse\" onClick={() => this.onClickRevert()}>\r\n            Reverse order\r\n          </button>\r\n          <ol className=\"stepList\">{this.renderStepList()}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  onClickRevert = () => {\r\n    this.setState({\r\n      isHistorySortAsc: !this.state.isHistorySortAsc,\r\n    });\r\n  };\r\n\r\n  onClickElement = (row, col) => {\r\n    if (!hasWinner) {\r\n      const xIsNext = this.state.stepNumber % 2 === 0;\r\n      const historicValueArray = this.state.historicValueArray.slice(\r\n        0,\r\n        this.state.stepNumber + 1\r\n      );\r\n      const nextValueArray = historicValueArray[\r\n        historicValueArray.length - 1\r\n      ].map((arr) => arr.slice());\r\n      const nextColorArray = this.state.historicColorArray[0].map((arr) =>\r\n        arr.slice()\r\n      );\r\n\r\n      nextValueArray[row][col] = xIsNext ? \"X\" : \"O\";\r\n\r\n      if (algorithm.isWin(nextValueArray, row, col)) {\r\n        hasWinner = true;\r\n        for (let i = 0; i < 5; i++) {\r\n          nextColorArray[winArray[i].row][winArray[i].col] = \"darkkhaki\";\r\n        }\r\n        this.gameModal.current.show();\r\n      }\r\n\r\n      this.setState({\r\n        historicValueArray: historicValueArray.concat([nextValueArray]),\r\n        historicColorArray: hasWinner\r\n          ? this.state.historicColorArray.concat([nextColorArray])\r\n          : this.state.historicColorArray,\r\n        stepNumber: historicValueArray.length,\r\n      });\r\n    }\r\n  };\r\n\r\n  renderStepList = () => {\r\n    const stepNumber = this.state.stepNumber;\r\n    const moveList = this.state.historicValueArray.map((valueArray, step) => {\r\n      const buttonLabel = step ? \"Go to step #\" + step : \"Go to game start\";\r\n      return (\r\n        <li id={step} key={step}>\r\n          <button\r\n            className={step === stepNumber ? \"highlight\" : \"non-highlight\"}\r\n            onClick={() => this.goTo(step)}\r\n          >\r\n            {buttonLabel}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n    return this.state.isHistorySortAsc ? moveList : moveList.reverse();\r\n  };\r\n}\r\n\r\nconst emptyValueArray = Array(boardSize)\r\n  .fill()\r\n  .map(() => new Array(boardSize).fill(null));\r\n\r\nconst emptyColorArray = Array(boardSize)\r\n  .fill()\r\n  .map(() => new Array(boardSize).fill(\"black\"));\r\n\r\nexport default Game;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './game';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}